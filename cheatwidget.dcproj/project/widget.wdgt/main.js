/* 
 This file was generated by Dashcode.  
 You may edit this file to customize your widget or web page 
 according to the license.txt file included in the project.
 */

//
// Function: load()
// Called by HTML body element's onload event when the widget is ready to start
//
function load()
{
    dashcode.setupParts();
}

//
// Function: remove()
// Called when the widget has been removed from the Dashboard
//
function remove()
{
    // Stop any timers to prevent CPU usage
    // Remove any preferences as needed
    // widget.setPreferenceForKey(null, dashcode.createInstancePreferenceKey("your-key"));
}

//
// Function: hide()
// Called when the widget has been hidden
//
function hide()
{
    // Stop any timers to prevent CPU usage
}

//
// Function: show()
// Called when the widget has been shown
//
function show()
{
    // Restart any timers that were stopped on hide
}

//
// Function: sync()
// Called when the widget has been synchronized with .Mac
//
function sync()
{
    // Retrieve any preference values that you need to be synchronized here
    // Use this for an instance key's value:
    // instancePreferenceValue = widget.preferenceForKey(null, dashcode.createInstancePreferenceKey("your-key"));
    //
    // Or this for global key's value:
    // globalPreferenceValue = widget.preferenceForKey(null, "your-key");
}

//
// Function: showBack(event)
// Called when the info button is clicked to show the back of the widget
//
// event: onClick event from the info button
//
function showBack(event)
{
    var front = document.getElementById("front");
    var back = document.getElementById("back");

    if (window.widget) {
        widget.prepareForTransition("ToBack");
    }

    front.style.display = "none";
    back.style.display = "block";

    if (window.widget) {
        setTimeout('widget.performTransition();', 0);
    }
}

//
// Function: showFront(event)
// Called when the done button is clicked from the back of the widget
//
// event: onClick event from the done button
//
function showFront(event)
{
    var front = document.getElementById("front");
    var back = document.getElementById("back");

    if (window.widget) {
        widget.prepareForTransition("ToFront");
    }

    front.style.display="block";
    back.style.display="none";

    if (window.widget) {
        setTimeout('widget.performTransition();', 0);
    }
}

if (window.widget) {
    widget.onremove = remove;
    widget.onhide = hide;
    widget.onshow = show;
    widget.onsync = sync;
}


$(function(){
  var Cheat = Backbone.Model.extend({
    defaults: function() {
      return {
        text: "empty cheat...",
      };
    },
    initialize: function() {
      if (!this.get("cheats")) {
        this.set({"cheats": this.defaults.cheats});
      }
    }
  });

  var Cheats = Backbone.Collection.extend({
    model: Cheat,
  });

  var Section = Backbone.Model.extend({
    defaults: function() {
      return {
        title: "empty title...",
      };
    },
    initialize: function() {
      this.cheats = new Cheats;
      if (!this.get("title")) {
        this.set({"title": this.defaults.title});
      }
    }
  });

  var SectionList = Backbone.Collection.extend({
    model: Section
  });

  var Sheet = new SectionList;

  var CheatView = Backbone.View.extend({
    tagName: "div",
    template: _.template($('#item-template').html()),
    initialize: function() {
      this.model.bind('change', this.render, this);
    },
    render: function() {
      this.$el.html(this.template(this.model.toJSON()));
      return this;
    },
    clear: function() {
      this.model.clear();
    }
  });

  var SectionView = Backbone.View.extend({
    tagName: "div",
    template: _.template($('#section-template').html()),
    initialize: function() {
      this.model.cheats.bind('reset', this.addAll, this);
      this.model.cheats.bind('all', this.render, this);
      this.main = $('#main');
      this.insertionPoint = this.$("#item-list");
      this.addAll();
    },
    render: function() {
      this.$el.html(this.template(this.model.toJSON()));
      this.addAll();
      return this;
    },
    addOne: function(cheat) {
      var view = new CheatView({model: cheat});
      this.$("#item-list").append(view.render().el);
    },
    addAll: function() {
      this.model.cheats.each(this.addOne, this);
    }
  });


  var AppView = Backbone.View.extend({
    el: $("#contents"),
    initialize: function() {
      Sheet.bind('add', this.addOne, this);
      Sheet.bind('reset', this.addAll, this);
      Sheet.bind('all', this.render, this);
      this.main = $('#main');
    },
    addAll: function() {
      Sheet.each(this.addOne);
    },
    addOne: function(section) {
      var view = new SectionView({model: section});
      this.$("#section-list").append(view.render().el);
    }
  });

  var App = new AppView;
  
  var jsontext = widget.system('/bin/cat ~/.cheatwidget', null).outputString;
  
  data = JSON.parse(jsontext);

  for (i=0; i<data.sheet.length; i++) {
    var section = data.sheet[i];
    var sec = new Section({title: section.title});
    Sheet.add(sec);
    for (j=0; j<section.cheats.length; j++) {
      sec.cheats.add({text: section.cheats[j]});
    }
  }
});
